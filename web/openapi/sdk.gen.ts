// This file is auto-generated by @hey-api/openapi-ts

import type { Client, Options as Options2, TDataShape } from "./client";
import { client } from "./client.gen";
import type {
  ChatChatGetData,
  ChatChatGetErrors,
  ChatChatGetResponses,
  RootGetData,
  RootGetResponses,
} from "./types.gen";
import {
  zChatChatGetData,
  zChatChatGetResponse,
  zRootGetData,
  zRootGetResponse,
} from "./zod.gen";

export type Options<
  TData extends TDataShape = TDataShape,
  ThrowOnError extends boolean = boolean,
> = Options2<TData, ThrowOnError> & {
  /**
   * You can provide a client instance returned by `createClient()` instead of
   * individual options. This might be also useful if you want to implement a
   * custom client.
   */
  client?: Client;
  /**
   * You can pass arbitrary values through the `meta` object. This can be
   * used to access values that aren't defined as part of the SDK function.
   */
  meta?: Record<string, unknown>;
};

/**
 * Root
 */
export const rootGet = <ThrowOnError extends boolean = false>(
  options?: Options<RootGetData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    RootGetResponses,
    unknown,
    ThrowOnError
  >({
    requestValidator: async (data) => {
      return await zRootGetData.parseAsync(data);
    },
    responseValidator: async (data) => {
      return await zRootGetResponse.parseAsync(data);
    },
    url: "/",
    ...options,
  });
};

/**
 * Chat
 */
export const chatChatGet = <ThrowOnError extends boolean = false>(
  options: Options<ChatChatGetData, ThrowOnError>
) => {
  return (options.client ?? client).sse.get<
    ChatChatGetResponses,
    ChatChatGetErrors,
    ThrowOnError
  >({
    requestValidator: async (data) => {
      return await zChatChatGetData.parseAsync(data);
    },
    responseValidator: async (data) => {
      return await zChatChatGetResponse.parseAsync(data);
    },
    url: "/chat",
    ...options,
  });
};
