// This file is auto-generated by @hey-api/openapi-ts

import { z } from 'zod';

/**
 * ValidationError
 */
export const zValidationError = z.object({
    loc: z.array(z.union([
        z.string(),
        z.int()
    ])),
    msg: z.string(),
    type: z.string()
});

/**
 * HTTPValidationError
 */
export const zHttpValidationError = z.object({
    detail: z.optional(z.array(zValidationError))
});

/**
 * Page
 * Normalized representation of a fetched page.
 */
export const zPage = z.object({
    url: z.string(),
    title: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    snippet: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    favicon: z.optional(z.union([
        z.string(),
        z.null()
    ]))
});

/**
 * AnswerMessage
 */
export const zAnswerMessage = z.object({
    type: z.literal('answer'),
    answer: z.string(),
    citations: z.optional(z.union([
        z.array(zPage),
        z.null()
    ]))
});

/**
 * ChatDonePayload
 * Payload emitted when the stream has completed successfully.
 */
export const zChatDonePayload = z.object({
    message: z.literal('[DONE]')
});

/**
 * ChatDoneEnvelope
 * Server-sent event dispatched when streaming is finished.
 */
export const zChatDoneEnvelope = z.object({
    event: z.literal('end'),
    data: zChatDonePayload
});

/**
 * ChatErrorPayload
 * Error payload sent when the stream encounters an exception.
 */
export const zChatErrorPayload = z.object({
    error: z.string()
});

/**
 * ChatErrorEnvelope
 * Server-sent event dispatched when an unrecoverable error occurs.
 */
export const zChatErrorEnvelope = z.object({
    event: z.literal('error'),
    data: zChatErrorPayload
});

/**
 * TurnStartMessage
 */
export const zTurnStartMessage = z.object({
    type: z.literal('turn.start'),
    conversation_id: z.string()
});

/**
 * StepStartMessage
 */
export const zStepStartMessage = z.object({
    type: z.literal('step.start'),
    title: z.string(),
    description: z.string()
});

/**
 * StepStatusMessage
 */
export const zStepStatusMessage = z.object({
    type: z.literal('step.status'),
    title: z.string(),
    description: z.string()
});

/**
 * StepEndMessage
 */
export const zStepEndMessage = z.object({
    type: z.literal('step.end'),
    title: z.string(),
    description: z.optional(z.union([
        z.string(),
        z.null()
    ]))
});

/**
 * StepFetchStartMessage
 */
export const zStepFetchStartMessage = z.object({
    type: z.literal('step.fetch.start'),
    title: z.string(),
    pages: z.array(zPage)
});

/**
 * StepFetchEndMessage
 */
export const zStepFetchEndMessage = z.object({
    type: z.literal('step.fetch.end'),
    title: z.string(),
    pages: z.array(zPage)
});

/**
 * StepAnswerStartMessage
 */
export const zStepAnswerStartMessage = z.object({
    type: z.literal('step.answer.start'),
    title: z.string(),
    description: z.optional(z.union([
        z.string(),
        z.null()
    ]))
});

/**
 * StepAnswerDeltaMessage
 */
export const zStepAnswerDeltaMessage = z.object({
    type: z.literal('step.answer.delta'),
    title: z.string(),
    delta: z.string()
});

/**
 * StepAnswerEndMessage
 */
export const zStepAnswerEndMessage = z.object({
    type: z.literal('step.answer.end'),
    title: z.string()
});

/**
 * ChatStreamEnvelope
 * Primary chat event wrapping a streamed message payload.
 */
export const zChatStreamEnvelope = z.object({
    event: z.literal('message'),
    data: z.union([
        zTurnStartMessage,
        zStepStartMessage,
        zStepStatusMessage,
        zStepEndMessage,
        zStepFetchStartMessage,
        zStepFetchEndMessage,
        zStepAnswerStartMessage,
        zStepAnswerDeltaMessage,
        zStepAnswerEndMessage,
        zAnswerMessage
    ])
});

export const zRootGetData = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.never()),
    query: z.optional(z.never())
});

/**
 * Response Root  Get
 * Successful Response
 */
export const zRootGetResponse = z.record(z.string(), z.string());

export const zChatChatGetData = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.never()),
    query: z.object({
        user_message: z.string(),
        conversation_id: z.optional(z.union([
            z.string(),
            z.null()
        ]))
    })
});

/**
 * Server-Sent Events stream containing chat progress updates and final answer.
 */
export const zChatChatGetResponse = z.union([
    zChatStreamEnvelope,
    zChatErrorEnvelope,
    zChatDoneEnvelope
]);
