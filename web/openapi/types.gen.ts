// This file is auto-generated by @hey-api/openapi-ts

export type ClientOptions = {
    baseUrl: `${string}://openapi.json` | (string & {});
};

/**
 * HTTPValidationError
 */
export type HttpValidationError = {
    /**
     * Detail
     */
    detail?: Array<ValidationError>;
};

/**
 * ValidationError
 */
export type ValidationError = {
    /**
     * Location
     */
    loc: Array<string | number>;
    /**
     * Message
     */
    msg: string;
    /**
     * Error Type
     */
    type: string;
};

/**
 * AnswerMessage
 */
export type AnswerMessage = {
    /**
     * Type
     */
    type: 'answer';
    /**
     * Answer
     */
    answer: string;
    /**
     * Citations
     */
    citations?: Array<Page> | null;
};

/**
 * ChatDoneEnvelope
 * Server-sent event dispatched when streaming is finished.
 */
export type ChatDoneEnvelope = {
    /**
     * Event
     */
    event: 'end';
    data: ChatDonePayload;
};

/**
 * ChatDonePayload
 * Payload emitted when the stream has completed successfully.
 */
export type ChatDonePayload = {
    /**
     * Message
     */
    message: '[DONE]';
};

/**
 * ChatErrorEnvelope
 * Server-sent event dispatched when an unrecoverable error occurs.
 */
export type ChatErrorEnvelope = {
    /**
     * Event
     */
    event: 'error';
    data: ChatErrorPayload;
};

/**
 * ChatErrorPayload
 * Error payload sent when the stream encounters an exception.
 */
export type ChatErrorPayload = {
    /**
     * Error
     */
    error: string;
};

/**
 * ChatStreamEnvelope
 * Primary chat event wrapping a streamed message payload.
 */
export type ChatStreamEnvelope = {
    /**
     * Event
     */
    event: 'message';
    /**
     * Data
     */
    data: TurnStartMessage | StepStartMessage | StepStatusMessage | StepEndMessage | StepFetchStartMessage | StepFetchEndMessage | StepAnswerStartMessage | StepAnswerDeltaMessage | StepAnswerEndMessage | AnswerMessage;
};

/**
 * Page
 * Normalized representation of a fetched page.
 */
export type Page = {
    /**
     * Url
     */
    url: string;
    /**
     * Title
     */
    title?: string | null;
    /**
     * Snippet
     */
    snippet?: string | null;
    /**
     * Favicon
     */
    favicon?: string | null;
};

/**
 * StepAnswerDeltaMessage
 */
export type StepAnswerDeltaMessage = {
    /**
     * Type
     */
    type: 'step.answer.delta';
    /**
     * Title
     */
    title: string;
    /**
     * Delta
     */
    delta: string;
};

/**
 * StepAnswerEndMessage
 */
export type StepAnswerEndMessage = {
    /**
     * Type
     */
    type: 'step.answer.end';
    /**
     * Title
     */
    title: string;
};

/**
 * StepAnswerStartMessage
 */
export type StepAnswerStartMessage = {
    /**
     * Type
     */
    type: 'step.answer.start';
    /**
     * Title
     */
    title: string;
    /**
     * Description
     */
    description?: string | null;
};

/**
 * StepEndMessage
 */
export type StepEndMessage = {
    /**
     * Type
     */
    type: 'step.end';
    /**
     * Title
     */
    title: string;
    /**
     * Description
     */
    description?: string | null;
};

/**
 * StepFetchEndMessage
 */
export type StepFetchEndMessage = {
    /**
     * Type
     */
    type: 'step.fetch.end';
    /**
     * Title
     */
    title: string;
    /**
     * Pages
     */
    pages: Array<Page>;
};

/**
 * StepFetchStartMessage
 */
export type StepFetchStartMessage = {
    /**
     * Type
     */
    type: 'step.fetch.start';
    /**
     * Title
     */
    title: string;
    /**
     * Pages
     */
    pages: Array<Page>;
};

/**
 * StepStartMessage
 */
export type StepStartMessage = {
    /**
     * Type
     */
    type: 'step.start';
    /**
     * Title
     */
    title: string;
    /**
     * Description
     */
    description: string;
};

/**
 * StepStatusMessage
 */
export type StepStatusMessage = {
    /**
     * Type
     */
    type: 'step.status';
    /**
     * Title
     */
    title: string;
    /**
     * Description
     */
    description: string;
};

/**
 * TurnStartMessage
 */
export type TurnStartMessage = {
    /**
     * Type
     */
    type: 'turn.start';
    /**
     * Conversation Id
     */
    conversation_id: string;
};

export type RootGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/';
};

export type RootGetResponses = {
    /**
     * Response Root  Get
     * Successful Response
     */
    200: {
        [key: string]: string;
    };
};

export type RootGetResponse = RootGetResponses[keyof RootGetResponses];

export type ChatChatGetData = {
    body?: never;
    path?: never;
    query: {
        /**
         * User Message
         */
        user_message: string;
        /**
         * Conversation Id
         */
        conversation_id?: string | null;
    };
    url: '/chat';
};

export type ChatChatGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ChatChatGetError = ChatChatGetErrors[keyof ChatChatGetErrors];

export type ChatChatGetResponses = {
    /**
     * Server-Sent Events stream containing chat progress updates and final answer.
     */
    200: ChatStreamEnvelope | ChatErrorEnvelope | ChatDoneEnvelope;
};

export type ChatChatGetResponse = ChatChatGetResponses[keyof ChatChatGetResponses];
